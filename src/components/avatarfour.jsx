/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/avatarfour.glb -o src/components/avatarfour.jsx -r public 
*/

import { useAnimations, useGLTF, useFBX } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { button, useControls } from "leva";
import React, { useEffect, useRef, useState } from "react";

import * as THREE from "three";
import { useChat } from "../hooks/useChat";
import jsonDataWelcome from "../../src/audios/message_static4.json"

const facialExpressions = {
  default: {},
  smile: {
    browInnerUp: 0.17,
    eyeSquintLeft: 0.4,
    eyeSquintRight: 0.44,
    noseSneerLeft: 0.1700000727403593,
    noseSneerRight: 0.14000002836874015,
    mouthPressLeft: 0.61,
    mouthPressRight: 0.41000000000000003,
  },
  funnyFace: {
    jawLeft: 0.63,
    mouthPucker: 0.53,
    noseSneerLeft: 1,
    noseSneerRight: 0.39,
    mouthLeft: 1,
    eyeLookUpLeft: 1,
    eyeLookUpRight: 1,
    cheekPuff: 0.9999924982764238,
    mouthDimpleLeft: 0.414743888682652,
    mouthRollLower: 0.32,
    mouthSmileLeft: 0.35499733688813034,
    mouthSmileRight: 0.35499733688813034,
  },
  sad: {
    mouthFrownLeft: 1,
    mouthFrownRight: 1,
    mouthShrugLower: 0.78341,
    browInnerUp: 0.452,
    eyeSquintLeft: 0.72,
    eyeSquintRight: 0.75,
    eyeLookDownLeft: 0.5,
    eyeLookDownRight: 0.5,
    jawForward: 1,
  },
  surprised: {
    eyeWideLeft: 0.5,
    eyeWideRight: 0.5,
    jawOpen: 0.351,
    mouthFunnel: 1,
    browInnerUp: 1,
  },
  angry: {
    browDownLeft: 1,
    browDownRight: 1,
    eyeSquintLeft: 1,
    eyeSquintRight: 1,
    jawForward: 1,
    jawLeft: 1,
    mouthShrugLower: 1,
    noseSneerLeft: 1,
    noseSneerRight: 0.42,
    eyeLookDownLeft: 0.16,
    eyeLookDownRight: 0.16,
    cheekSquintLeft: 1,
    cheekSquintRight: 1,
    mouthClose: 0.23,
    mouthFunnel: 0.63,
    mouthDimpleRight: 1,
  },
  crazy: {
    browInnerUp: 0.9,
    jawForward: 1,
    noseSneerLeft: 0.5700000000000001,
    noseSneerRight: 0.51,
    eyeLookDownLeft: 0.39435766259644545,
    eyeLookUpRight: 0.4039761421719682,
    eyeLookInLeft: 0.9618479575523053,
    eyeLookInRight: 0.9618479575523053,
    jawOpen: 0.9618479575523053,
    mouthDimpleLeft: 0.9618479575523053,
    mouthDimpleRight: 0.9618479575523053,
    mouthStretchLeft: 0.27893590769016857,
    mouthStretchRight: 0.2885543872656917,
    mouthSmileLeft: 0.5578718153803371,
    mouthSmileRight: 0.38473918302092225,
    tongueOut: 0.9618479575523053,
  },
};

const corresponding = {
  A: "viseme_PP",
  B: "viseme_kk",
  C: "viseme_I",
  D: "viseme_AA",
  E: "viseme_O",
  F: "viseme_U",
  G: "viseme_FF",
  H: "viseme_TH",
  X: "viseme_PP",
};

let setupMode = false;

export function Avatarfour(props) {
  const { nodes, materials, scene } = useGLTF('/models/avatarfour.glb')

  const {
    message,
    onMessagePlayed,
    setPlayWelcomeChat,
    chat,
    playWelcomeChat,
    audio,
    setAudio,
    lipsync,
    setLipsync,
    audioAutoPlay,
    setAudioAutoPlay,
    setLipsyncAuto,
    lipsyncAuto,
    playErroredAudio,
    setPlayErroredAudio,
    setLoading,
    setButtonState,
    avatarLoader,
    setAvatarLoader,
    setMessage
  } = useChat();

  const [blink, setBlink] = useState(false);
  const [winkLeft, setWinkLeft] = useState(false);
  const [winkRight, setWinkRight] = useState(false);
  const [facialExpression, setFacialExpression] = useState("");

  useEffect(() => {
    nodes.Wolf3D_Head.morphTargetDictionary.mouthFrownLeft = 15
    nodes.Wolf3D_Head.morphTargetDictionary.jawForward = 15
    nodes.Wolf3D_Head.morphTargetDictionary.mouthFrownRight = 20
    nodes.Wolf3D_Head.morphTargetInfluences[
      nodes.Wolf3D_Head.morphTargetDictionary["viseme_O"]
    ] = 1
    nodes.Wolf3D_Teeth.morphTargetInfluences[
      nodes.Wolf3D_Teeth.morphTargetDictionary["viseme_O"]
    ] = 1
  }, [])


  useEffect(() => {
    if (avatarLoader) {
      setAvatarLoader(false)
    }
  }, [avatarLoader])

  useEffect(() => {
    if (playErroredAudio) {
      playAudioAgain()
    }
  }, [playErroredAudio])


  const playAudioAgain = async () => {
    try {
      setAnimation('IdleStand');
      setFacialExpression("smile");
      setLipsync(lipsyncAuto);

      try {
        const audioElement = document.getElementById('audio-element');
        if (audioElement) {
          audioElement.src = audioAutoPlay;
          audioElement.load();
          setAudio(audioElement);
          await audioElement.play()
            .catch((e) => {
              console.error('error:', e);
            });

          setAudioAutoPlay(null)
          setPlayErroredAudio(false);
          setLoading(false);
        } else {
          console.log('audio is null');
        }
      } catch (error) {
        console.error('error:', error);
      }
    } catch (error) {
      console.error('error:', error);
    }
  }

  useEffect(() => {
    if (audio) {
      setButtonState(true)
      audio.addEventListener('ended', () => {
        setButtonState(false)
        onMessagePlayed();
      });
    }
  }, [audio])


  useEffect(() => {
    if (!message) {
      setAnimation("IdleStand");
      return;
    } else {
      setAnimation("IdleStand");
      setFacialExpression(message.facialExpression);
      setLipsync(message.lipsync);

      const playAudio = async () => {
        try {
          const audio = new Audio("data:audio/mp3;base64," + message.audio);
          const playButton = document.getElementById('send-button');
          if (playButton) {
            setAudio(audio);
            await audio.play()
          } else {
            console.error('Play button not found');
          }
        } catch (error) {
          console.error('Audio play failed', error);
          setAudioAutoPlay("data:audio/mp3;base64," + message.audio);
          setLipsyncAuto(message.lipsync)
        }
      };
      playAudio();
    }
  }, [message]);

  useEffect(() => {
    if (playWelcomeChat === 'play') {
      playWelcomeAudio(false);
    }
  }, [playWelcomeChat])


  const playWelcomeAudio = async () => {
    try {
      let botAnimation = 'IdleStand'
      let jsonAnimation = jsonDataWelcome
      let audioAnimation = '/src/audios/message_static4.mp3'

      setAnimation(botAnimation);
      setFacialExpression("smile");
      setLipsync(jsonAnimation);

      const playAudio = async () => {
        try {
          const audio = new Audio();
          audio.src = audioAnimation;
          audio.controls = true;
          audio.autoplay = true;
          audio.preload = 'auto';

          const playButton = document.getElementById('send-button');
          if (playButton) {
            setAudio(audio);
            setPlayWelcomeChat('')
            await audio.play()
          } else {
            console.error('Play button not found');
          }
        } catch (error) {
          console.error('Audio play failed', error);
          setAudioAutoPlay(audioAnimation);
          setLipsyncAuto(jsonAnimation)
        }
      };
      playAudio();
    } catch (error) {
      console.log('error:', error);
    }
  }

  const { animations } = useGLTF("/models/animations.glb");
  const { animations: WavingAnimation } = useFBX("/animations/WavingMale.fbx")
  const { animations: IdlemalestandAnimation } = useFBX("/animations/StandingIdlegay.fbx")
  const { animations: avatar3Greeting } = useFBX("/animations/avatar3Greeting.fbx")

  IdlemalestandAnimation[0].name = "IdleStand"
  WavingAnimation[0].name = "WavingMale"
  avatar3Greeting[0].name = "greetingThree"

  const group = useRef();
  const { actions, mixer } = useAnimations([
    ...animations,
    IdlemalestandAnimation[0],
    WavingAnimation[0],
    avatar3Greeting[0]],
    group);
  const [animation, setAnimation] = useState(
    animations.find((a) => a.name === "Idle") ? "IdleStand" : animations[0].name
  );

  useEffect(() => {
    if (actions[animation]) {
      actions[animation]
        .reset()
        .fadeIn(0.5)
        .play()
      return () => actions[animation]?.fadeOut(0.5);
    }
  }, [animation]);

  const lerpMorphTarget = (target, value, speed = 0.1) => {
    scene.traverse((child) => {
      if (child.isSkinnedMesh && child.morphTargetDictionary) {
        const index = child.morphTargetDictionary[target];
        if (
          index === undefined ||
          child.morphTargetInfluences[index] === undefined
        ) {
          return;
        }
        child.morphTargetInfluences[index] = THREE.MathUtils.lerp(
          child.morphTargetInfluences[index],
          value,
          speed
        );

        if (!setupMode) {
          try {
            set({
              [target]: value,
            });
          } catch (e) { }
        }
      }
    });
  };



  useFrame(() => {
    !setupMode &&
      Object.keys(nodes.EyeLeft.morphTargetDictionary).forEach((key) => {
        const mapping = facialExpressions[facialExpression];
        if (key === "eyeBlinkLeft" || key === "eyeBlinkRight") {
          return;
        }
        if (mapping && mapping[key]) {
          lerpMorphTarget(key, mapping[key], 0.1);
        } else {
          lerpMorphTarget(key, 0, 0.1);
        }
      });

    lerpMorphTarget("eyeBlinkLeft", blink || winkLeft ? 1 : 0, 0.5);
    lerpMorphTarget("eyeBlinkRight", blink || winkRight ? 1 : 0, 0.5);

    // LIPSYNC
    if (setupMode) {
      return;
    }

    const appliedMorphTargets = [];
    if (lipsync && audio) {
      const currentAudioTime = audio.currentTime;
      for (let i = 0; i < lipsync.mouthCues.length; i++) {
        const mouthCue = lipsync.mouthCues[i];
        if (
          currentAudioTime >= mouthCue.start &&
          currentAudioTime <= mouthCue.end
        ) {
          appliedMorphTargets.push(corresponding[mouthCue.value]);
          lerpMorphTarget(corresponding[mouthCue.value], 1, 0.2);
          break;
        }
      }
    }

    Object.values(corresponding).forEach((value) => {
      if (appliedMorphTargets.includes(value)) {
        return;
      }
      lerpMorphTarget(value, 0, 0.1);
    });
  });

  useControls("FacialExpressions", {
    chat: button(() => chat()),
    winkLeft: button(() => {
      setWinkLeft(true);
      setTimeout(() => setWinkLeft(false), 300);
    }),
    winkRight: button(() => {
      setWinkRight(true);
      setTimeout(() => setWinkRight(false), 300);
    }),
    animation: {
      value: animation,
      options: animation,
      onChange: (value) => setAnimation(value),
    },
    facialExpression: {
      options: Object.keys(facialExpressions),
      onChange: (value) => setFacialExpression(value),
    },
    enableSetupMode: button(() => {
      setupMode = true;
    }),
    disableSetupMode: button(() => {
      setupMode = false;
    }),
    logMorphTargetValues: button(() => {
      const emotionValues = {};
      Object.keys(nodes.EyeLeft.morphTargetDictionary).forEach((key) => {
        if (key === "eyeBlinkLeft" || key === "eyeBlinkRight") {
          return;
        }
        const value =
          nodes.EyeLeft.morphTargetInfluences[
          nodes.EyeLeft.morphTargetDictionary[key]
          ];
        if (value > 0.01) {
          emotionValues[key] = value;
        }
      });
      console.log(JSON.stringify(emotionValues, null, 2));
    }),
  });

  const [, set] = useControls("MorphTarget", () =>
    Object.assign(
      {},
      ...Object.keys(nodes.EyeLeft.morphTargetDictionary).map((key) => {
        return {
          [key]: {
            label: key,
            value: 0,
            min: nodes.EyeLeft.morphTargetInfluences[
              nodes.EyeLeft.morphTargetDictionary[key]
            ],
            max: 1,
            onChange: (val) => {
              if (setupMode) {
                lerpMorphTarget(key, val, 1);
              }
            },
          },
        };
      })
    )
  );

  useEffect(() => {
    let blinkTimeout;
    const nextBlink = () => {
      blinkTimeout = setTimeout(() => {
        setBlink(true);
        setTimeout(() => {
          setBlink(false);
          nextBlink();
        }, 200);
      }, THREE.MathUtils.randInt(1000, 5000));
    };
    nextBlink();
    return () => clearTimeout(blinkTimeout);
  }, []);


  return (
    <group {...props} dispose={null} ref={group}>
      <primitive object={nodes.Hips} />
      <skinnedMesh
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Hair.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Hair.morphTargetInfluences}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Outfit_Top.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Outfit_Top.morphTargetInfluences}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Outfit_Bottom.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Outfit_Bottom.morphTargetInfluences}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Outfit_Footwear.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Outfit_Footwear.morphTargetInfluences}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Body.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Body.morphTargetInfluences}
      />
      <skinnedMesh
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
    </group>
  )
}

useGLTF.preload('/models/avatarfour.glb')
